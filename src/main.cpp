#include <SPI.h>
#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>
#include <vector>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_CLK  36
#define OLED_MOSI 35
#define OLED_RES  34
#define OLED_DC   33
#define OLED_CS   32

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, OLED_MOSI, OLED_CLK, OLED_DC, OLED_RES, OLED_CS);

// void out_GoLeft(int x, int y, int tg_x, int tg_y, int time, bitmap bmp) {
// 	int xt = x;
// 	int yt = y;
// 	for (int i = 0; i < 128; i++) {
// 		display.clearDisplay();
// 		display.drawBitmap(xt, yt, bmp, 128, 64, SSD1306_WHITE);
// 	}
// }





// void out_GoLeft(int x, int y, int dist, int dly, int spd, const unsigned char* bmp) {
// 	int xt = x;
// 	int yt = y;
// 	for (int i = 0; i < 128; i++) {
// 		display.clearDisplay();
// 		display.drawBitmap(xt, yt, bmp, 128, 64, SSD1306_WHITE);
// 	}
// }



// 'EZ_Pedal_Logo', 128x64px
const unsigned char epd_bitmap_EZ_Pedal_Logo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0f, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0f, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0xff, 0xff, 0x3f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1f, 0xff, 0xff, 0x3f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3f, 0xff, 0xff, 0x1f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3f, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3f, 0xc0, 0x3e, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7f, 0x80, 0x1e, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7f, 0x80, 0x0c, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7f, 0x80, 0x04, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xff, 0xff, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xff, 0xfe, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0xff, 0xfe, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0xff, 0xfe, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0xff, 0xfc, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0xff, 0xfc, 0x10, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0xfc, 0x00, 0x20, 0xff, 0xc0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0xfc, 0x00, 0x61, 0xff, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0xfc, 0x01, 0xe7, 0xff, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1f, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1f, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7f, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xbf, 0xff, 0xfe, 0x07, 0xff, 0xff, 0x0f, 0xfe, 0x00, 
	0x00, 0x1f, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0x8f, 0xff, 0xff, 0x0f, 0xff, 0xff, 0x87, 0xfe, 0x00, 
	0x00, 0x1f, 0xff, 0xff, 0x0f, 0xff, 0xff, 0x8f, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xc3, 0xfc, 0x00, 
	0x00, 0x0f, 0xff, 0xff, 0x87, 0xff, 0xff, 0x07, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xe3, 0xfc, 0x00, 
	0x00, 0x7f, 0xff, 0xff, 0x9f, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xe3, 0xfc, 0x00, 
	0x00, 0x7f, 0xff, 0xff, 0xbf, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xe7, 0xf8, 0x00, 
	0x00, 0x7f, 0xff, 0xff, 0x3f, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xc7, 0xf8, 0x00, 
	0x00, 0x7f, 0x80, 0xff, 0x3f, 0xc0, 0x3e, 0x3f, 0xc0, 0x7f, 0x98, 0x00, 0x3f, 0xc7, 0xf8, 0x00, 
	0x00, 0xff, 0x00, 0xff, 0x7f, 0x80, 0x1e, 0x7f, 0x80, 0x7f, 0xa0, 0x00, 0x3f, 0xcf, 0xf0, 0x00, 
	0x00, 0xff, 0x01, 0xff, 0x7f, 0x80, 0x0c, 0x7f, 0x80, 0xff, 0x80, 0x00, 0x7f, 0xcf, 0xf0, 0x00, 
	0x00, 0xff, 0x01, 0xfe, 0x7f, 0x80, 0x04, 0x7f, 0x80, 0xff, 0x3f, 0xff, 0xff, 0x8f, 0xf0, 0x00, 
	0x01, 0xff, 0xff, 0xfe, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x7f, 0xff, 0xff, 0x9f, 0xe0, 0x00, 
	0x01, 0xff, 0xff, 0xfe, 0xff, 0xff, 0x00, 0xff, 0x01, 0xff, 0x7f, 0xff, 0xff, 0x9f, 0xe0, 0x00, 
	0x01, 0xff, 0xff, 0xfc, 0xff, 0xfe, 0x00, 0xff, 0x01, 0xfe, 0x7f, 0xff, 0xff, 0x1f, 0xe0, 0x00, 
	0x03, 0xff, 0xff, 0xfd, 0xff, 0xfe, 0x01, 0xff, 0x01, 0xfe, 0xff, 0xff, 0xff, 0x3f, 0xe0, 0x00, 
	0x03, 0xff, 0xff, 0xfd, 0xff, 0xfe, 0x01, 0xfe, 0x03, 0xfe, 0xff, 0xff, 0xff, 0x3f, 0xc0, 0x00, 
	0x03, 0xff, 0xff, 0xf1, 0xff, 0xfc, 0x01, 0xfe, 0x03, 0xfc, 0xff, 0xff, 0xfe, 0x3f, 0xc0, 0x00, 
	0x07, 0xff, 0xff, 0xe3, 0xff, 0xfc, 0x13, 0xfe, 0x03, 0xfd, 0xff, 0x01, 0xfe, 0x7f, 0xc0, 0x04, 
	0x07, 0xf8, 0x00, 0x03, 0xfc, 0x00, 0x23, 0xfc, 0x07, 0xfd, 0xfe, 0x03, 0xfe, 0x7f, 0x80, 0x08, 
	0x07, 0xf8, 0x00, 0x03, 0xfc, 0x00, 0x63, 0xfc, 0x07, 0xf9, 0xfe, 0x03, 0xfc, 0x7f, 0x80, 0x18, 
	0x0f, 0xf8, 0x00, 0x07, 0xfc, 0x01, 0xe7, 0xfc, 0x07, 0xfb, 0xfe, 0x03, 0xfc, 0xff, 0x80, 0x78, 
	0x0f, 0xf0, 0x00, 0x07, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xfb, 0xfc, 0x07, 0xfc, 0xff, 0xff, 0xf0, 
	0x0f, 0xf0, 0x00, 0x07, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xf3, 0xfc, 0x07, 0xf8, 0xff, 0xff, 0xf0, 
	0x1f, 0xf0, 0x00, 0x0f, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xf7, 0xfc, 0x07, 0xf9, 0xff, 0xff, 0xf0, 
	0x1f, 0xe0, 0x00, 0x0f, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xf7, 0xf8, 0x07, 0xf9, 0xff, 0xff, 0xe0, 
	0x1f, 0xe0, 0x00, 0x0f, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xe7, 0xf8, 0x0f, 0xf1, 0xff, 0xff, 0xe0, 
	0x3f, 0xe0, 0x00, 0x1f, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xcf, 0xf8, 0x0f, 0xf3, 0xff, 0xff, 0xe0, 
	0x3f, 0xc0, 0x00, 0x1f, 0xff, 0xff, 0x9f, 0xff, 0xff, 0x0f, 0xf0, 0x1f, 0xf3, 0xff, 0xff, 0xc0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)
const int epd_bitmap_allArray_LEN = 1;
const unsigned char* epd_bitmap_allArray[1] = {
	epd_bitmap_EZ_Pedal_Logo
};

void Out_Bitmap_X(int x, int y, int LeftRight, int dist, int dly, int spd, const unsigned char* bmp) {
	// x: start position; y: start position; LeftRight: -1 for left, 1 for right; dist: distance to move; dly: delay between frames, dly must bigger than spd; spd: speed of movement
	int x_p = x;
	int y_p = y;
	int spd_t = spd;
	for (int i = 0; i < dist; i++) {
		for (int j = 0; j < spd_t;j++) {
			x_p = x_p + LeftRight;
			display.clearDisplay();
			display.drawBitmap(x_p, y_p, epd_bitmap_EZ_Pedal_Logo, 128, 64, SSD1306_WHITE);
			display.display();
			delay(dly - spd_t);
		}
		if (spd_t < dly) {
			spd_t = spd_t + spd; 
		}
		
	}
}



// void Move_Bitmap_(int x, int y, int x_t, int y_t, int LeftRight, int dly, const unsigned char* bmp) {
// 	// x: start position; y: start position; LeftRight: -1 for left, 1 for right; dist: distance to move; dly: delay between frames, dly must bigger than spd; spd: speed of movement
// 	int x_p = x;
// 	int y_p = y;
// 	int spd_t = spd;
// 	for (int i = 0; i < 128; i++) {
// 		// Move to target position
// 		for (int j = 0; j < spd_t;j++) {
// 			x_p = x_p + LeftRight;
// 			display.clearDisplay();
// 			display.drawBitmap(x_p, y_p, epd_bitmap_EZ_Pedal_Logo, 128, 64, SSD1306_WHITE);
// 			display.display();
// 			delay(dly - spd_t);
// 		}
// 		if (spd_t < dly) {
// 			spd_t = spd_t + spd; 
// 		}
		
// 	}
// }




/////////////////////////////////////////////////////////////////////////////////////////////////



void setup() {
    Serial.println("Device Online");

  if(!display.begin(SSD1306_SWITCHCAPVCC)) {
    Serial.println("SSD1306 Setup Failed!");
    while(1); // 停止执行
  }
  
  //Setup Done!

  delay(100);
  Serial.println("Check");
  
  //Display Test
	int logo_pos = 0;
	for (int i=0; i<128; i++) { 
		display.clearDisplay();
		logo_pos = (pow(i-128,2)+pow(i-128,2))/256;
		display.drawBitmap(logo_pos, 0, epd_bitmap_EZ_Pedal_Logo, 128, 64, SSD1306_WHITE);
		Serial.println(logo_pos);
		display.display();
		delay(10);
	}




  // display.clearDisplay();
  // display.drawBitmap(0, 0, epd_bitmap_EZ_Pedal_Logo, 128, 64, SSD1306_WHITE);
  // display.display();

  Serial.println("Setup Finished!");


  // Display "By ARPO"
  const char* text = "By ARPO";
  int x = 58;
  int y = 20;
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(1);

  for (int i = 0; text[i] != '\0'; i++) {
    display.setCursor(x, y);
    display.print(text[i]);
    display.display();
    x += 6;
    delay(100);
  }

	Out_Bitmap_X(0, 0, -1, 130, 15, 1, epd_bitmap_EZ_Pedal_Logo);
//   for (int i = 0; i < 2048; i++) {
// 	display.drawPixel(random(0, 127), random(0, 63), SSD1306_WHITE);
// 	display.display();
// 	delay(10);
//   }





}

void loop() {
	
}
